version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.12.0
  aws-cli: circleci/aws-cli@2.0.3

jobs:

  create-small-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''
          #Reference: https://knowledge.udacity.com/questions/687026

  lint:
    docker: 
      - image: python:3.7.3-stretch
    working_directory: ~/repo

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make setup
            make install
            pip3 install pylint
            pylint --help
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
            
#_______________________________________________________________________________________#

  build-docker-image:
    machine: true
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: |
            docker build --tag=capstone .
            docker image ls
      - run:
          name: Push Docker image into Docker Hub
          command: |
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
            dockerpath=v4ldus/capstone
            docker tag capstone $dockerpath
            echo "Docker ID and Image: $dockerpath"
            docker push $dockerpath
            
#_______________________________________________________________________________________#

  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          EKS Cluster
        type: string
      aws-region:
        default: 'us-east-1'
        description: |
          AWS region that the EKS cluster will be created in.
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: << parameters.aws-region >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: k8s/deployment.yml
          resource-name: deployment/test-capstone
            
#_______________________________________________________________________________________#

workflows:
  default:
    jobs:
      #- lint
      #- build-docker-image:
      #    requires: [lint]
      #- create-small-cluster:
      #    cluster-name: capstone
      #    requires:
      #      - build-docker-image
      #- aws-eks/create-cluster:
      #    cluster-name: capstone
      #    aws-region: ${AWS_REGION}
      - create-deployment:
          cluster-name: capstone
          aws-region: us-east-1
      #    requires:
      #      - aws-eks/create-cluster
      - aws-eks/update-container-image:
          cluster-name: capstone
          aws-region: ${AWS_REGION}
          container-image-updates: "capstone=capstone:latest"
          post-steps:
            - kubernetes/delete-resource:
                resource-names: test-capstone
                resource-types: deployment
                wait: true
          record: true
          requires:
            - create-deployment
          resource-name: deployment/test-capstone
